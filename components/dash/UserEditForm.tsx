'use client'
import { Form, FormControl, FormField, FormItem, FormLabel } from "@/components/ui/form";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { Input } from "@/components/ui/input";
import { useEffect, useRef } from "react";
import autoAnimate from "@formkit/auto-animate";
import { api } from "@/trpc/react";
import { Button } from "@/components/ui/button";
import { User, UserForm, userFormSchema } from "@/server/schema/user";
import { toast } from "../ui/use-toast";
import { Combobox } from "../ui/combobox";
import { Institution } from "@/server/schema/institution";



const UserEditForm = ({ onCreate, data, institutions }: { onCreate: () => void, data: User, institutions: Institution[] }) => {
    const parent = useRef(null);

    useEffect(() => {
        parent.current && autoAnimate(parent.current);
    }, [parent]);

    const form = useForm<UserForm>({
        resolver: zodResolver(userFormSchema),
        defaultValues: {
            id: data.id,
            telegram_id: data.telegram_id,
            username: data.username,
            display_name: data.display_name,
            institutionId: data.institutionId,
            FIO: data.FIO,
            phone_number: data.phone_number,
            email: data.email,
            specialty: data.specialty
        },
        reValidateMode: "onChange"
    });

    const userEditMutation = api.user.updateUser.useMutation({
        onMutate: () => {
            toast({
                title: 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...',
            })
        },
        onError: (e) => {
            toast({
                title: 'üö´ –û—à–∏–±–∫–∞',
                description: e.message
            })
        },
        onSuccess: () => {
            toast({
                title: '‚úÖ –£—Å–ø–µ—Ö',
                description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
            })
            onCreate()
        },
    })

    const catalogInstitutions = institutions.map((v) => ({
        value: v.id,
        label: v.name,
    }));
    function handleSubmit(data: UserForm): void {
        userEditMutation.mutate(data);
    }

    return <Form {...form}>
        <form autoComplete="off" className="flex flex-col w-72 gap-2" onSubmit={form.handleSubmit(handleSubmit)} ref={parent}>
            <FormField
                control={form.control}
                name="FIO"
                render={({ field }) => (
                    <FormItem>
                        <FormLabel>–§–ò–û</FormLabel>
                        <Input autoFocus autoComplete="off" aria-autocomplete="none" placeholder="–§–ò–û" {...field} />
                    </FormItem>
                )} />
            <FormField
                control={form.control}
                name="phone_number"
                render={({ field }) => (
                    <FormItem>
                        <FormLabel>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</FormLabel>
                        <Input autoFocus autoComplete="off" aria-autocomplete="none" placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" {...field} />
                    </FormItem>
                )} />
            <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                    <FormItem>
                        <FormLabel>Email</FormLabel>
                        <Input autoFocus autoComplete="off" aria-autocomplete="none" placeholder="–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã" {...field} />
                    </FormItem>
                )} />
            <FormField
                control={form.control}
                name="specialty"
                render={({ field }) => (
                    <FormItem>
                        <FormLabel>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</FormLabel>
                        <Input autoFocus autoComplete="off" aria-autocomplete="none" placeholder="–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å" {...field} />
                    </FormItem>
                )} />
            <FormField
                control={form.control}
                name="institutionId"
                render={({ field }) => (
                    <FormItem>
                        <FormLabel>–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ</FormLabel>
                        <FormControl>
                            <Combobox
                                options={catalogInstitutions}
                                {...field}
                                names={{
                                    button: "–í—ã–±—Ä–∞—Ç—å –≤–∏–¥",
                                    empty: "–ù–µ—Ç—É —Ç–∞–∫–æ–≥–æ...",
                                    search: "–ü–æ–∏—Å–∫ –≤–∏–¥–∞ –ø—Ä–∞–∫—Ç–∏–∫–∏",
                                }}
                            />
                        </FormControl>
                    </FormItem>
                )} />
            <Button type="submit">{userEditMutation.isLoading ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}</Button>
        </form>
    </Form>
}

export default UserEditForm;